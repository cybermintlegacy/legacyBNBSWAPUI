{"version":3,"sources":["hooks/useCallWithGasPrice.ts","components/TransactionConfirmationModal/index.tsx","components/SearchModal/CommonBases.tsx","components/SearchModal/ImportRow.tsx","components/SearchModal/CurrencyList.tsx","components/SearchModal/sorting.ts","components/SearchModal/CurrencySearch.tsx","components/SearchModal/ImportToken.tsx","components/SearchModal/types.ts","components/SearchModal/ManageLists.tsx","components/SearchModal/ManageTokens.tsx","components/SearchModal/Manage.tsx","components/SearchModal/ImportList.tsx","components/SearchModal/CurrencySearchModal.tsx","components/CurrencyInputPanel/NumericalInput.tsx","components/CurrencyInputPanel/index.tsx","hooks/useTokenAllowance.ts","hooks/useApproveCallback.ts","hooks/useTransactionDeadline.ts","hooks/useCurrentBlockTimestamp.ts"],"names":["useCallWithGasPrice","gasPrice","useGasPrice","callWithGasPrice","useCallback","contract","methodName","a","methodArgs","overrides","contractMethod","get","hasManualGasPriceOverride","tx","Wrapper","styled","div","Section","AutoColumn","ConfirmedIcon","ColumnCenter","ConfirmationPendingContent","pendingText","t","useTranslation","gap","justify","fontSize","bold","small","textAlign","color","TransactionSubmittedContent","onDismiss","chainId","hash","currencyToAdd","library","useActiveWeb3React","token","wrappedCurrency","strokeWidth","width","external","href","getBscScanLink","provider","isMetaMask","variant","mt","onClick","registerToken","address","symbol","decimals","asset","ml","ConfirmationModalContent","bottomContent","topContent","TransactionConfirmationModal","title","customOnDismiss","attemptingTxn","content","handleDismiss","headerBackground","BaseWrapper","theme","disable","colors","dropdown","background","CommonBases","onSelect","selectedCurrency","QuestionHelper","text","currencyEquals","ETHER","currency","style","marginRight","SUGGESTED_BASES","map","selected","Token","TokenSection","dim","CheckIcon","CheckmarkCircleIcon","success","NameOverflow","ImportRow","showImportView","setImportToken","inactiveTokenList","useCombinedInactiveList","list","isAdded","useIsUserAddedToken","isActive","useIsTokenActive","CurrencyLogo","size","opacity","name","logoURI","mr","minWidth","currencyKey","StyledBalanceText","Text","FixedContentRow","Balance","balance","toExact","toSignificant","MenuItem","RowBetween","disabled","CurrencyRow","isSelected","otherSelected","account","key","selectedTokenList","useCombinedActiveList","isOnSelectedList","isTokenOnList","customAdded","useCurrencyBalance","undefined","className","Column","ellipsis","maxWidth","justifySelf","CircleLoader","CurrencyList","height","currencies","onCurrencySelect","otherCurrency","fixedListRef","showETH","breakIndex","itemData","useMemo","formatted","Currency","slice","length","inactiveTokens","useAllInactiveTokens","Row","data","index","Boolean","showImport","Object","keys","includes","padding","borderRadius","itemKey","ref","itemCount","itemSize","useTokenComparator","inverted","balances","useAllTokenBalances","comparator","tokenA","tokenB","balanceA","balanceB","balanceComp","greaterThan","equalTo","toLowerCase","getTokenComparator","swapSound","Audio","CurrencySearch","otherSelectedCurrency","showCommonBases","fixedList","useRef","useState","searchQuery","setSearchQuery","debouncedQuery","useDebounce","invertSearchOrder","allTokens","useAllTokens","searchToken","useToken","searchTokenIsAdded","useAudioModeManager","audioPlay","s","trim","tokenComparator","filteredTokens","filterTokens","values","sortedTokens","sort","filteredSortedTokens","useSortedTokensByQuery","handleCurrencySelect","play","inputRef","useEffect","current","focus","handleInput","event","input","target","value","checksummedInput","isAddress","scrollTo","handleEnter","e","useFoundOnInactiveList","filteredInactiveTokens","id","placeholder","scale","autoComplete","onChange","onKeyDown","margin","concat","mb","ImportToken","CurrencyModalView","tokens","confirmed","setConfirmed","addToken","useAddUserToken","truncateHash","gridTemplateRows","gridGap","outline","startIcon","alignItems","justifyContent","type","checked","userSelect","RowWrapper","active","tertiary","listUrlRowHTMLId","listUrl","replace","ListRow","memo","version","listsByUrl","useSelector","state","lists","byUrl","dispatch","useDispatch","pending","pendingUpdate","useIsListActive","handleAcceptListUpdate","acceptListUpdate","handleRemoveList","window","confirm","removeList","handleEnableList","enableList","handleDisableList","disableList","useTooltip","major","minor","patch","placement","trigger","targetRef","tooltip","tooltipVisible","alt","flex","textTransform","ListContainer","ManageLists","setModalView","setImportList","setListUrl","listUrlInput","setListUrlInput","useAllLists","activeListUrls","useActiveListUrls","activeCopy","setActiveCopy","fetchList","useFetchListCallback","validUrl","uriToHttp","parseENSAddress","sortedLists","filter","UNSUPPORTED_LIST_URLS","u1","u2","l1","l2","tempList","setTempList","addError","setAddError","then","catch","fetchTempList","isImported","handleImport","importList","textOverflow","overflow","paddingTop","Card","marginLeft","Footer","ManageTokens","userAddedTokens","useUserAddedTokens","removeToken","useRemoveUserAddedToken","handleRemoveAll","tokenList","isAddressValid","isWarning","importToken","StyledButtonMenu","ButtonMenu","Manage","showLists","setShowLists","activeIndex","onItemClick","prev","TextDot","ImportList","listURL","onImport","useTheme","adding","loadingRequestId","handleAddList","error","message","flexDirection","failure","backgroundAlt","StyledModalContainer","ModalContainer","StyledModalBody","ModalBody","CurrencySearchModal","search","modalView","prevView","usePrevious","config","onBack","manage","StyledInput","align","textSubtle","inputRegex","RegExp","Input","React","onUserInput","rest","nextUserInput","test","escapeRegExp","inputMode","autoCorrect","pattern","minLength","maxLength","spellCheck","InputRow","CurrencySelectButton","Button","attrs","LabelRow","InputPanel","hideInput","Container","shadows","inset","CurrencyInputPanel","onMax","showMaxButton","label","disableCurrencySelect","hideBalance","pair","selectedCurrencyBalance","translatedLabel","useModal","onPresentCurrencyModal","display","cursor","val","currency0","token0","currency1","token1","useTokenAllowance","ApprovalState","owner","spender","useTokenContract","inputs","allowance","useSingleCallResult","result","TokenAmount","toString","useApproveCallback","amountToApprove","currentAllowance","pendingApproval","useHasPendingApproval","approvalState","APPROVED","lessThan","PENDING","NOT_APPROVED","UNKNOWN","tokenContract","addTransaction","useTransactionAdder","approve","console","useExact","estimateGas","MaxUint256","raw","estimatedGas","gasLimit","calculateGasMargin","response","summary","approval","tokenAddress","useTransactionDeadline","ttl","user","userDeadline","blockTimestamp","multicall","useMulticallContract","useCurrentBlockTimestamp","add"],"mappings":"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","file":"static/js/1.a1e97a70.chunk.js","sourcesContent":["import { useCallback } from 'react'\nimport ethers, { Contract, CallOverrides } from 'ethers'\nimport { useGasPrice } from 'state/user/hooks'\nimport { get } from 'lodash'\n\n/**\n * Perform a contract call with a gas price returned from useGasPrice\n * @param contract Used to perform the call\n * @param methodName The name of the method called\n * @param methodArgs An array of arguments to pass to the method\n * @param overrides An overrides object to pass to the method. gasPrice passed in here will take priority over the price returned by useGasPrice\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport function useCallWithGasPrice() {\n  const gasPrice = useGasPrice()\n\n  const callWithGasPrice = useCallback(\n    async (\n      contract: Contract,\n      methodName: string,\n      methodArgs: any[] = [],\n      overrides: CallOverrides = null,\n    ): Promise<ethers.providers.TransactionResponse> => {\n      const contractMethod = get(contract, methodName)\n      const hasManualGasPriceOverride = overrides?.gasPrice\n\n      const tx = await contractMethod(\n        ...methodArgs,\n        hasManualGasPriceOverride ? { ...overrides } : { ...overrides, gasPrice },\n      )\n\n      return tx\n    },\n    [gasPrice],\n  )\n\n  return { callWithGasPrice }\n}\n","import React, { useCallback } from 'react'\nimport { ChainId, Currency, Token } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport {\n  Button,\n  Text,\n  ErrorIcon,\n  ArrowUpIcon,\n  MetamaskIcon,\n  Flex,\n  Box,\n  Link,\n  Spinner,\n  Modal,\n  InjectedModalProps,\n} from '@pancakeswap/uikit'\nimport { registerToken } from 'utils/wallet'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { RowFixed } from '../Layout/Row'\nimport { AutoColumn, ColumnCenter } from '../Layout/Column'\nimport { getBscScanLink } from '../../utils'\n\nconst Wrapper = styled.div`\n  width: 100%;\n`\nconst Section = styled(AutoColumn)`\n  padding: 24px;\n`\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 24px 0;\n`\n\nfunction ConfirmationPendingContent({ pendingText }: { pendingText: string }) {\n  const { t } = useTranslation()\n  return (\n    <Wrapper>\n      <ConfirmedIcon>\n        <Spinner />\n      </ConfirmedIcon>\n      <AutoColumn gap=\"12px\" justify=\"center\">\n        <Text fontSize=\"20px\">{t('Waiting For Confirmation')}</Text>\n        <AutoColumn gap=\"12px\" justify=\"center\">\n          <Text bold small textAlign=\"center\">\n            {pendingText}\n          </Text>\n        </AutoColumn>\n        <Text small color=\"textSubtle\" textAlign=\"center\">\n          {t('Confirm this transaction in your wallet')}\n        </Text>\n      </AutoColumn>\n    </Wrapper>\n  )\n}\n\nfunction TransactionSubmittedContent({\n  onDismiss,\n  chainId,\n  hash,\n  currencyToAdd,\n}: {\n  onDismiss: () => void\n  hash: string | undefined\n  chainId: ChainId\n  currencyToAdd?: Currency | undefined\n}) {\n  const { library } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const token: Token | undefined = wrappedCurrency(currencyToAdd, chainId)\n\n  return (\n    <Wrapper>\n      <Section>\n        <ConfirmedIcon>\n          <ArrowUpIcon strokeWidth={0.5} width=\"90px\" color=\"primary\" />\n        </ConfirmedIcon>\n        <AutoColumn gap=\"12px\" justify=\"center\">\n          <Text fontSize=\"20px\">{t('Transaction Submitted')}</Text>\n          {chainId && hash && (\n            <Link external small href={getBscScanLink(hash, 'transaction', chainId)}>\n              {t('View on BscScan')}\n            </Link>\n          )}\n          {currencyToAdd && library?.provider?.isMetaMask && (\n            <Button\n              variant=\"tertiary\"\n              mt=\"12px\"\n              width=\"fit-content\"\n              onClick={() => registerToken(token.address, token.symbol, token.decimals)}\n            >\n              <RowFixed>\n                {t('Add %asset% to Metamask', { asset: currencyToAdd.symbol })}\n                <MetamaskIcon width=\"16px\" ml=\"6px\" />\n              </RowFixed>\n            </Button>\n          )}\n          <Button onClick={onDismiss} mt=\"20px\">\n            {t('Close')}\n          </Button>\n        </AutoColumn>\n      </Section>\n    </Wrapper>\n  )\n}\n\nexport function ConfirmationModalContent({\n  bottomContent,\n  topContent,\n}: {\n  topContent: () => React.ReactNode\n  bottomContent: () => React.ReactNode\n}) {\n  return (\n    <Wrapper>\n      <Box>{topContent()}</Box>\n      <Box>{bottomContent()}</Box>\n    </Wrapper>\n  )\n}\n\nexport function TransactionErrorContent({ message, onDismiss }: { message: string; onDismiss: () => void }) {\n  const { t } = useTranslation()\n  return (\n    <Wrapper>\n      <AutoColumn justify=\"center\">\n        <ErrorIcon color=\"failure\" width=\"64px\" />\n        <Text color=\"failure\" style={{ textAlign: 'center', width: '85%' }}>\n          {message}\n        </Text>\n      </AutoColumn>\n\n      <Flex justifyContent=\"center\" pt=\"24px\">\n        <Button onClick={onDismiss}>{t('Dismiss')}</Button>\n      </Flex>\n    </Wrapper>\n  )\n}\n\ninterface ConfirmationModalProps {\n  title: string\n  customOnDismiss?: () => void\n  hash: string | undefined\n  content: () => React.ReactNode\n  attemptingTxn: boolean\n  pendingText: string\n  currencyToAdd?: Currency | undefined\n}\n\nconst TransactionConfirmationModal: React.FC<InjectedModalProps & ConfirmationModalProps> = ({\n  title,\n  onDismiss,\n  customOnDismiss,\n  attemptingTxn,\n  hash,\n  pendingText,\n  content,\n  currencyToAdd,\n}) => {\n  const { chainId } = useActiveWeb3React()\n\n  const handleDismiss = useCallback(() => {\n    if (customOnDismiss) {\n      customOnDismiss()\n    }\n    onDismiss()\n  }, [customOnDismiss, onDismiss])\n\n  if (!chainId) return null\n\n  return (\n    <Modal title={title} headerBackground=\"gradients.cardHeader\" onDismiss={handleDismiss}>\n      {attemptingTxn ? (\n        <ConfirmationPendingContent pendingText={pendingText} />\n      ) : hash ? (\n        <TransactionSubmittedContent\n          chainId={chainId}\n          hash={hash}\n          onDismiss={onDismiss}\n          currencyToAdd={currencyToAdd}\n        />\n      ) : (\n        content()\n      )}\n    </Modal>\n  )\n}\n\nexport default TransactionConfirmationModal\n","import React from 'react'\nimport { ChainId, Currency, currencyEquals, ETHER, Token } from '@pancakeswap/sdk'\nimport { Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\nimport { SUGGESTED_BASES } from '../../config/constants'\nimport { AutoColumn } from '../Layout/Column'\nimport QuestionHelper from '../QuestionHelper'\nimport { AutoRow } from '../Layout/Row'\nimport { CurrencyLogo } from '../Logo'\n\nconst BaseWrapper = styled.div<{ disable?: boolean }>`\n  border: 1px solid ${({ theme, disable }) => (disable ? 'transparent' : theme.colors.dropdown)};\n  border-radius: 10px;\n  display: flex;\n  padding: 6px;\n\n  align-items: center;\n  :hover {\n    cursor: ${({ disable }) => !disable && 'pointer'};\n    background-color: ${({ theme, disable }) => !disable && theme.colors.background};\n  }\n\n  background-color: ${({ theme, disable }) => disable && theme.colors.dropdown};\n  opacity: ${({ disable }) => disable && '0.4'};\n`\n\nexport default function CommonBases({\n  chainId,\n  onSelect,\n  selectedCurrency,\n}: {\n  chainId?: ChainId\n  selectedCurrency?: Currency | null\n  onSelect: (currency: Currency) => void\n}) {\n  const { t } = useTranslation()\n  return (\n    <AutoColumn gap=\"md\">\n      <AutoRow>\n        <Text fontSize=\"14px\">{t('Common bases')}</Text>\n        <QuestionHelper text={t('These tokens are commonly paired with other tokens.')} ml=\"4px\" />\n      </AutoRow>\n      <AutoRow gap=\"auto\">\n        <BaseWrapper\n          onClick={() => {\n            if (!selectedCurrency || !currencyEquals(selectedCurrency, ETHER)) {\n              onSelect(ETHER)\n            }\n          }}\n          disable={selectedCurrency === ETHER}\n        >\n          <CurrencyLogo currency={ETHER} style={{ marginRight: 8 }} />\n          <Text>BNB</Text>\n        </BaseWrapper>\n        {(chainId ? SUGGESTED_BASES[chainId] : []).map((token: Token) => {\n          const selected = selectedCurrency instanceof Token && selectedCurrency.address === token.address\n          return (\n            <BaseWrapper onClick={() => !selected && onSelect(token)} disable={selected} key={token.address}>\n              <CurrencyLogo currency={token} style={{ marginRight: 8 }} />\n              <Text>{token.symbol}</Text>\n            </BaseWrapper>\n          )\n        })}\n      </AutoRow>\n    </AutoColumn>\n  )\n}\n","import React, { CSSProperties } from 'react'\nimport { Token } from '@pancakeswap/sdk'\nimport { Button, Text, CheckmarkCircleIcon } from '@pancakeswap/uikit'\nimport { AutoRow, RowFixed } from 'components/Layout/Row'\nimport { AutoColumn } from 'components/Layout/Column'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport { ListLogo } from 'components/Logo'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCombinedInactiveList } from 'state/lists/hooks'\nimport styled from 'styled-components'\nimport { useIsUserAddedToken, useIsTokenActive } from 'hooks/Tokens'\nimport { useTranslation } from 'contexts/Localization'\n\nconst TokenSection = styled.div<{ dim?: boolean }>`\n  padding: 4px 20px;\n  height: 56px;\n  display: grid;\n  grid-template-columns: auto minmax(auto, 1fr) auto;\n  grid-gap: 16px;\n  align-items: center;\n\n  opacity: ${({ dim }) => (dim ? '0.4' : '1')};\n`\n\nconst CheckIcon = styled(CheckmarkCircleIcon)`\n  height: 16px;\n  width: 16px;\n  margin-right: 6px;\n  stroke: ${({ theme }) => theme.colors.success};\n`\n\nconst NameOverflow = styled.div`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 140px;\n  font-size: 12px;\n`\n\nexport default function ImportRow({\n  token,\n  style,\n  dim,\n  showImportView,\n  setImportToken,\n}: {\n  token: Token\n  style?: CSSProperties\n  dim?: boolean\n  showImportView: () => void\n  setImportToken: (token: Token) => void\n}) {\n  // globals\n  const { chainId } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  // check if token comes from list\n  const inactiveTokenList = useCombinedInactiveList()\n  const list = chainId && inactiveTokenList?.[chainId]?.[token.address]?.list\n\n  // check if already active on list or local storage tokens\n  const isAdded = useIsUserAddedToken(token)\n  const isActive = useIsTokenActive(token)\n\n  return (\n    <TokenSection style={style}>\n      <CurrencyLogo currency={token} size=\"24px\" style={{ opacity: dim ? '0.6' : '1' }} />\n      <AutoColumn gap=\"4px\" style={{ opacity: dim ? '0.6' : '1' }}>\n        <AutoRow>\n          <Text>{token.symbol}</Text>\n          <Text color=\"textDisabled\" ml=\"8px\">\n            <NameOverflow title={token.name}>{token.name}</NameOverflow>\n          </Text>\n        </AutoRow>\n        {list && list.logoURI && (\n          <RowFixed>\n            <Text small mr=\"4px\" color=\"textSubtle\">\n              {t('via')} {list.name}\n            </Text>\n            <ListLogo logoURI={list.logoURI} size=\"12px\" />\n          </RowFixed>\n        )}\n      </AutoColumn>\n      {!isActive && !isAdded ? (\n        <Button\n          width=\"fit-content\"\n          onClick={() => {\n            if (setImportToken) {\n              setImportToken(token)\n            }\n            showImportView()\n          }}\n        >\n          {t('Import')}\n        </Button>\n      ) : (\n        <RowFixed style={{ minWidth: 'fit-content' }}>\n          <CheckIcon />\n          <Text color=\"success\">Active</Text>\n        </RowFixed>\n      )}\n    </TokenSection>\n  )\n}\n","import React, { CSSProperties, MutableRefObject, useCallback, useMemo } from 'react'\nimport { Currency, CurrencyAmount, currencyEquals, ETHER, Token } from '@pancakeswap/sdk'\nimport { Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { FixedSizeList } from 'react-window'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { LightGreyCard } from 'components/Card'\nimport QuestionHelper from 'components/QuestionHelper'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCombinedActiveList } from '../../state/lists/hooks'\nimport { useCurrencyBalance } from '../../state/wallet/hooks'\nimport { useIsUserAddedToken, useAllInactiveTokens } from '../../hooks/Tokens'\nimport Column from '../Layout/Column'\nimport { RowFixed, RowBetween } from '../Layout/Row'\nimport { CurrencyLogo } from '../Logo'\nimport CircleLoader from '../Loader/CircleLoader'\nimport { isTokenOnList } from '../../utils'\nimport ImportRow from './ImportRow'\n\nfunction currencyKey(currency: Currency): string {\n  return currency instanceof Token ? currency.address : currency === ETHER ? 'ETHER' : ''\n}\n\nconst StyledBalanceText = styled(Text)`\n  white-space: nowrap;\n  overflow: hidden;\n  max-width: 5rem;\n  text-overflow: ellipsis;\n`\n\nconst FixedContentRow = styled.div`\n  padding: 4px 20px;\n  height: 56px;\n  display: grid;\n  grid-gap: 16px;\n  align-items: center;\n`\n\nfunction Balance({ balance }: { balance: CurrencyAmount }) {\n  return <StyledBalanceText title={balance.toExact()}>{balance.toSignificant(4)}</StyledBalanceText>\n}\n\nconst MenuItem = styled(RowBetween)<{ disabled: boolean; selected: boolean }>`\n  padding: 4px 20px;\n  height: 56px;\n  display: grid;\n  grid-template-columns: auto minmax(auto, 1fr) minmax(0, 72px);\n  grid-gap: 8px;\n  cursor: ${({ disabled }) => !disabled && 'pointer'};\n  pointer-events: ${({ disabled }) => disabled && 'none'};\n  :hover {\n    background-color: ${({ theme, disabled }) => !disabled && theme.colors.background};\n  }\n  opacity: ${({ disabled, selected }) => (disabled || selected ? 0.5 : 1)};\n`\n\nfunction CurrencyRow({\n  currency,\n  onSelect,\n  isSelected,\n  otherSelected,\n  style,\n}: {\n  currency: Currency\n  onSelect: () => void\n  isSelected: boolean\n  otherSelected: boolean\n  style: CSSProperties\n}) {\n  const { account } = useActiveWeb3React()\n  const key = currencyKey(currency)\n  const selectedTokenList = useCombinedActiveList()\n  const isOnSelectedList = isTokenOnList(selectedTokenList, currency)\n  const customAdded = useIsUserAddedToken(currency)\n  const balance = useCurrencyBalance(account ?? undefined, currency)\n\n  // only show add or remove buttons if not on selected list\n  return (\n    <MenuItem\n      style={style}\n      className={`token-item-${key}`}\n      onClick={() => (isSelected ? null : onSelect())}\n      disabled={isSelected}\n      selected={otherSelected}\n    >\n      <CurrencyLogo currency={currency} size=\"24px\" />\n      <Column>\n        <Text bold>{currency.symbol}</Text>\n        <Text color=\"textSubtle\" small ellipsis maxWidth=\"200px\">\n          {!isOnSelectedList && customAdded && 'Added by user •'} {currency.name}\n        </Text>\n      </Column>\n      <RowFixed style={{ justifySelf: 'flex-end' }}>\n        {balance ? <Balance balance={balance} /> : account ? <CircleLoader /> : null}\n      </RowFixed>\n    </MenuItem>\n  )\n}\n\nexport default function CurrencyList({\n  height,\n  currencies,\n  selectedCurrency,\n  onCurrencySelect,\n  otherCurrency,\n  fixedListRef,\n  showETH,\n  showImportView,\n  setImportToken,\n  breakIndex,\n}: {\n  height: number\n  currencies: Currency[]\n  selectedCurrency?: Currency | null\n  onCurrencySelect: (currency: Currency) => void\n  otherCurrency?: Currency | null\n  fixedListRef?: MutableRefObject<FixedSizeList | undefined>\n  showETH: boolean\n  showImportView: () => void\n  setImportToken: (token: Token) => void\n  breakIndex: number | undefined\n}) {\n  const itemData: (Currency | undefined)[] = useMemo(() => {\n    let formatted: (Currency | undefined)[] = showETH ? [Currency.ETHER, ...currencies] : currencies\n    if (breakIndex !== undefined) {\n      formatted = [...formatted.slice(0, breakIndex), undefined, ...formatted.slice(breakIndex, formatted.length)]\n    }\n    return formatted\n  }, [breakIndex, currencies, showETH])\n\n  const { chainId } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const inactiveTokens: {\n    [address: string]: Token\n  } = useAllInactiveTokens()\n\n  const Row = useCallback(\n    ({ data, index, style }) => {\n      const currency: Currency = data[index]\n      const isSelected = Boolean(selectedCurrency && currencyEquals(selectedCurrency, currency))\n      const otherSelected = Boolean(otherCurrency && currencyEquals(otherCurrency, currency))\n      const handleSelect = () => onCurrencySelect(currency)\n\n      const token = wrappedCurrency(currency, chainId)\n\n      const showImport = inactiveTokens && token && Object.keys(inactiveTokens).includes(token.address)\n\n      if (index === breakIndex || !data) {\n        return (\n          <FixedContentRow style={style}>\n            <LightGreyCard padding=\"8px 12px\" borderRadius=\"8px\">\n              <RowBetween>\n                <Text small>{t('Expanded results from inactive Token Lists')}</Text>\n                <QuestionHelper\n                  text={t(\n                    \"Tokens from inactive lists. Import specific tokens below or click 'Manage' to activate more lists.\",\n                  )}\n                  ml=\"4px\"\n                />\n              </RowBetween>\n            </LightGreyCard>\n          </FixedContentRow>\n        )\n      }\n\n      if (showImport && token) {\n        return (\n          <ImportRow style={style} token={token} showImportView={showImportView} setImportToken={setImportToken} dim />\n        )\n      }\n      return (\n        <CurrencyRow\n          style={style}\n          currency={currency}\n          isSelected={isSelected}\n          onSelect={handleSelect}\n          otherSelected={otherSelected}\n        />\n      )\n    },\n    [\n      chainId,\n      inactiveTokens,\n      onCurrencySelect,\n      otherCurrency,\n      selectedCurrency,\n      setImportToken,\n      showImportView,\n      breakIndex,\n      t,\n    ],\n  )\n\n  const itemKey = useCallback((index: number, data: any) => currencyKey(data[index]), [])\n\n  return (\n    <FixedSizeList\n      height={height}\n      ref={fixedListRef as any}\n      width=\"100%\"\n      itemData={itemData}\n      itemCount={itemData.length}\n      itemSize={56}\n      itemKey={itemKey}\n    >\n      {Row}\n    </FixedSizeList>\n  )\n}\n","import { Token, TokenAmount } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\nimport { useAllTokenBalances } from '../../state/wallet/hooks'\n\n// compare two token amounts with highest one coming first\nfunction balanceComparator(balanceA?: TokenAmount, balanceB?: TokenAmount) {\n  if (balanceA && balanceB) {\n    return balanceA.greaterThan(balanceB) ? -1 : balanceA.equalTo(balanceB) ? 0 : 1\n  }\n  if (balanceA && balanceA.greaterThan('0')) {\n    return -1\n  }\n  if (balanceB && balanceB.greaterThan('0')) {\n    return 1\n  }\n  return 0\n}\n\nfunction getTokenComparator(balances: {\n  [tokenAddress: string]: TokenAmount | undefined\n}): (tokenA: Token, tokenB: Token) => number {\n  return function sortTokens(tokenA: Token, tokenB: Token): number {\n    // -1 = a is first\n    // 1 = b is first\n\n    // sort by balances\n    const balanceA = balances[tokenA.address]\n    const balanceB = balances[tokenB.address]\n\n    const balanceComp = balanceComparator(balanceA, balanceB)\n    if (balanceComp !== 0) return balanceComp\n\n    if (tokenA.symbol && tokenB.symbol) {\n      // sort by symbol\n      return tokenA.symbol.toLowerCase() < tokenB.symbol.toLowerCase() ? -1 : 1\n    }\n    return tokenA.symbol ? -1 : tokenB.symbol ? -1 : 0\n  }\n}\n\nfunction useTokenComparator(inverted: boolean): (tokenA: Token, tokenB: Token) => number {\n  const balances = useAllTokenBalances()\n  const comparator = useMemo(() => getTokenComparator(balances ?? {}), [balances])\n  return useMemo(() => {\n    if (inverted) {\n      return (tokenA: Token, tokenB: Token) => comparator(tokenA, tokenB) * -1\n    }\n    return comparator\n  }, [inverted, comparator])\n}\n\nexport default useTokenComparator\n","import React, { KeyboardEvent, RefObject, useCallback, useMemo, useRef, useState, useEffect } from 'react'\nimport { Currency, ETHER, Token } from '@pancakeswap/sdk'\nimport { Text, Input, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { FixedSizeList } from 'react-window'\nimport { useAudioModeManager } from 'state/user/hooks'\nimport useDebounce from 'hooks/useDebounce'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useAllTokens, useToken, useIsUserAddedToken, useFoundOnInactiveList } from '../../hooks/Tokens'\nimport { isAddress } from '../../utils'\nimport Column, { AutoColumn } from '../Layout/Column'\nimport Row from '../Layout/Row'\nimport CommonBases from './CommonBases'\nimport CurrencyList from './CurrencyList'\nimport { filterTokens, useSortedTokensByQuery } from './filtering'\nimport useTokenComparator from './sorting'\n\nimport ImportRow from './ImportRow'\n\ninterface CurrencySearchProps {\n  selectedCurrency?: Currency | null\n  onCurrencySelect: (currency: Currency) => void\n  otherSelectedCurrency?: Currency | null\n  showCommonBases?: boolean\n  showImportView: () => void\n  setImportToken: (token: Token) => void\n}\n\nconst swapSound = new Audio('swap.mp3')\n\nfunction CurrencySearch({\n  selectedCurrency,\n  onCurrencySelect,\n  otherSelectedCurrency,\n  showCommonBases,\n  showImportView,\n  setImportToken,\n}: CurrencySearchProps) {\n  const { t } = useTranslation()\n  const { chainId } = useActiveWeb3React()\n\n  // refs for fixed size lists\n  const fixedList = useRef<FixedSizeList>()\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const debouncedQuery = useDebounce(searchQuery, 200)\n\n  const [invertSearchOrder] = useState<boolean>(false)\n\n  const allTokens = useAllTokens()\n\n  // if they input an address, use it\n  const searchToken = useToken(debouncedQuery)\n  const searchTokenIsAdded = useIsUserAddedToken(searchToken)\n\n  const [audioPlay] = useAudioModeManager()\n\n  const showETH: boolean = useMemo(() => {\n    const s = debouncedQuery.toLowerCase().trim()\n    return s === '' || s === 'b' || s === 'bn' || s === 'bnb'\n  }, [debouncedQuery])\n\n  const tokenComparator = useTokenComparator(invertSearchOrder)\n\n  const filteredTokens: Token[] = useMemo(() => {\n    return filterTokens(Object.values(allTokens), debouncedQuery)\n  }, [allTokens, debouncedQuery])\n\n  const sortedTokens: Token[] = useMemo(() => {\n    return filteredTokens.sort(tokenComparator)\n  }, [filteredTokens, tokenComparator])\n\n  const filteredSortedTokens = useSortedTokensByQuery(sortedTokens, debouncedQuery)\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency) => {\n      onCurrencySelect(currency)\n      if (audioPlay) {\n        swapSound.play()\n      }\n    },\n    [audioPlay, onCurrencySelect],\n  )\n\n  // manage focus on modal show\n  const inputRef = useRef<HTMLInputElement>()\n\n  useEffect(() => {\n    inputRef.current.focus()\n  }, [])\n\n  const handleInput = useCallback((event) => {\n    const input = event.target.value\n    const checksummedInput = isAddress(input)\n    setSearchQuery(checksummedInput || input)\n    fixedList.current?.scrollTo(0)\n  }, [])\n\n  const handleEnter = useCallback(\n    (e: KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === 'Enter') {\n        const s = debouncedQuery.toLowerCase().trim()\n        if (s === 'bnb') {\n          handleCurrencySelect(ETHER)\n        } else if (filteredSortedTokens.length > 0) {\n          if (\n            filteredSortedTokens[0].symbol?.toLowerCase() === debouncedQuery.trim().toLowerCase() ||\n            filteredSortedTokens.length === 1\n          ) {\n            handleCurrencySelect(filteredSortedTokens[0])\n          }\n        }\n      }\n    },\n    [filteredSortedTokens, handleCurrencySelect, debouncedQuery],\n  )\n\n  // if no results on main list, show option to expand into inactive\n  const inactiveTokens = useFoundOnInactiveList(debouncedQuery)\n  const filteredInactiveTokens: Token[] = useSortedTokensByQuery(inactiveTokens, debouncedQuery)\n\n  return (\n    <>\n      <div>\n        <AutoColumn gap=\"16px\">\n          <Row>\n            <Input\n              id=\"token-search-input\"\n              placeholder={t('Search name or paste address')}\n              scale=\"lg\"\n              autoComplete=\"off\"\n              value={searchQuery}\n              ref={inputRef as RefObject<HTMLInputElement>}\n              onChange={handleInput}\n              onKeyDown={handleEnter}\n            />\n          </Row>\n          {showCommonBases && (\n            <CommonBases chainId={chainId} onSelect={handleCurrencySelect} selectedCurrency={selectedCurrency} />\n          )}\n        </AutoColumn>\n        {searchToken && !searchTokenIsAdded ? (\n          <Column style={{ padding: '20px 0', height: '100%' }}>\n            <ImportRow token={searchToken} showImportView={showImportView} setImportToken={setImportToken} />\n          </Column>\n        ) : filteredSortedTokens?.length > 0 || filteredInactiveTokens?.length > 0 ? (\n          <Box margin=\"24px -24px\">\n            <CurrencyList\n              height={390}\n              showETH={showETH}\n              currencies={\n                filteredInactiveTokens ? filteredSortedTokens.concat(filteredInactiveTokens) : filteredSortedTokens\n              }\n              breakIndex={inactiveTokens && filteredSortedTokens ? filteredSortedTokens.length : undefined}\n              onCurrencySelect={handleCurrencySelect}\n              otherCurrency={otherSelectedCurrency}\n              selectedCurrency={selectedCurrency}\n              fixedListRef={fixedList}\n              showImportView={showImportView}\n              setImportToken={setImportToken}\n            />\n          </Box>\n        ) : (\n          <Column style={{ padding: '20px', height: '100%' }}>\n            <Text color=\"textSubtle\" textAlign=\"center\" mb=\"20px\">\n              {t('No results found.')}\n            </Text>\n          </Column>\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default CurrencySearch\n","import React, { useState } from 'react'\nimport { Token, Currency } from '@pancakeswap/sdk'\nimport { Button, Text, ErrorIcon, Flex, Message, Checkbox, Link, Tag, Grid } from '@pancakeswap/uikit'\nimport { AutoColumn } from 'components/Layout/Column'\nimport { useAddUserToken } from 'state/user/hooks'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCombinedInactiveList } from 'state/lists/hooks'\nimport { ListLogo } from 'components/Logo'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ImportProps {\n  tokens: Token[]\n  handleCurrencySelect?: (currency: Currency) => void\n}\n\nfunction ImportToken({ tokens, handleCurrencySelect }: ImportProps) {\n  const { chainId } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const [confirmed, setConfirmed] = useState(false)\n\n  const addToken = useAddUserToken()\n\n  // use for showing import source on inactive tokens\n  const inactiveTokenList = useCombinedInactiveList()\n\n  return (\n    <AutoColumn gap=\"lg\">\n      <Message variant=\"warning\">\n        <Text>\n          {t(\n            'Anyone can create a BEP20 token on BSC with any name, including creating fake versions of existing tokens and tokens that claim to represent projects that do not have a token.',\n          )}\n          <br />\n          <br />\n          {t('If you purchase an arbitrary token, you may be unable to sell it back.')}\n        </Text>\n      </Message>\n\n      {tokens.map((token) => {\n        const list = chainId && inactiveTokenList?.[chainId]?.[token.address]?.list\n        const address = token.address ? `${truncateHash(token.address)}` : null\n        return (\n          <Grid key={token.address} gridTemplateRows=\"1fr 1fr 1fr\" gridGap=\"4px\">\n            {list !== undefined ? (\n              <Tag\n                variant=\"success\"\n                outline\n                scale=\"sm\"\n                startIcon={list.logoURI && <ListLogo logoURI={list.logoURI} size=\"12px\" />}\n              >\n                {t('via')} {list.name}\n              </Tag>\n            ) : (\n              <Tag variant=\"failure\" outline scale=\"sm\" startIcon={<ErrorIcon color=\"failure\" />}>\n                {t('Unknown Source')}\n              </Tag>\n            )}\n            <Flex alignItems=\"center\">\n              <Text mr=\"8px\">{token.name}</Text>\n              <Text>({token.symbol})</Text>\n            </Flex>\n            {chainId && (\n              <Flex justifyContent=\"space-between\" width=\"100%\">\n                <Text mr=\"4px\">{address}</Text>\n                <Link href={getBscScanLink(token.address, 'address', chainId)} external>\n                  ({t('View on BscScan')})\n                </Link>\n              </Flex>\n            )}\n          </Grid>\n        )\n      })}\n\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex alignItems=\"center\" onClick={() => setConfirmed(!confirmed)}>\n          <Checkbox\n            scale=\"sm\"\n            name=\"confirmed\"\n            type=\"checkbox\"\n            checked={confirmed}\n            onChange={() => setConfirmed(!confirmed)}\n          />\n          <Text ml=\"8px\" style={{ userSelect: 'none' }}>\n            {t('I understand')}\n          </Text>\n        </Flex>\n        <Button\n          variant=\"danger\"\n          disabled={!confirmed}\n          onClick={() => {\n            tokens.map((token) => addToken(token))\n            if (handleCurrencySelect) {\n              handleCurrencySelect(tokens[0])\n            }\n          }}\n          className=\".token-dismiss-button\"\n        >\n          {t('Import')}\n        </Button>\n      </Flex>\n    </AutoColumn>\n  )\n}\n\nexport default ImportToken\n","export enum CurrencyModalView {\n  search,\n  manage,\n  importToken,\n  importList,\n}\n\nexport default CurrencyModalView\n","import React, { memo, useCallback, useMemo, useState, useEffect } from 'react'\nimport { Button, Text, CheckmarkIcon, CogIcon, Input, Toggle, LinkExternal, useTooltip } from '@pancakeswap/uikit'\nimport { useDispatch, useSelector } from 'react-redux'\nimport styled from 'styled-components'\nimport { TokenList, Version } from '@uniswap/token-lists'\nimport Card from 'components/Card'\nimport { UNSUPPORTED_LIST_URLS } from 'config/constants/lists'\nimport { parseENSAddress } from 'utils/ENS/parseENSAddress'\nimport { useTranslation } from 'contexts/Localization'\nimport useFetchListCallback from '../../hooks/useFetchListCallback'\n\nimport { AppDispatch, AppState } from '../../state'\nimport { acceptListUpdate, removeList, disableList, enableList } from '../../state/lists/actions'\nimport { useIsListActive, useAllLists, useActiveListUrls } from '../../state/lists/hooks'\nimport uriToHttp from '../../utils/uriToHttp'\n\nimport Column, { AutoColumn } from '../Layout/Column'\nimport { ListLogo } from '../Logo'\nimport Row, { RowFixed, RowBetween } from '../Layout/Row'\nimport { CurrencyModalView } from './types'\n\nfunction listVersionLabel(version: Version): string {\n  return `v${version.major}.${version.minor}.${version.patch}`\n}\n\nconst Wrapper = styled(Column)`\n  width: 100%;\n  height: 100%;\n`\n\nconst RowWrapper = styled(Row)<{ active: boolean }>`\n  background-color: ${({ active, theme }) => (active ? `${theme.colors.success}19` : 'transparent')};\n  border: solid 1px;\n  border-color: ${({ active, theme }) => (active ? theme.colors.success : theme.colors.tertiary)};\n  transition: 200ms;\n  align-items: center;\n  padding: 1rem;\n  border-radius: 20px;\n`\n\nfunction listUrlRowHTMLId(listUrl: string) {\n  return `list-row-${listUrl.replace(/\\./g, '-')}`\n}\n\nconst ListRow = memo(function ListRow({ listUrl }: { listUrl: string }) {\n  const listsByUrl = useSelector<AppState, AppState['lists']['byUrl']>((state) => state.lists.byUrl)\n  const dispatch = useDispatch<AppDispatch>()\n  const { current: list, pendingUpdate: pending } = listsByUrl[listUrl]\n\n  const isActive = useIsListActive(listUrl)\n\n  const { t } = useTranslation()\n\n  const handleAcceptListUpdate = useCallback(() => {\n    if (!pending) return\n    dispatch(acceptListUpdate(listUrl))\n  }, [dispatch, listUrl, pending])\n\n  const handleRemoveList = useCallback(() => {\n    // eslint-disable-next-line no-alert\n    if (window.confirm('Please confirm you would like to remove this list')) {\n      dispatch(removeList(listUrl))\n    }\n  }, [dispatch, listUrl])\n\n  const handleEnableList = useCallback(() => {\n    dispatch(enableList(listUrl))\n  }, [dispatch, listUrl])\n\n  const handleDisableList = useCallback(() => {\n    dispatch(disableList(listUrl))\n  }, [dispatch, listUrl])\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <div>\n      <Text>{list && listVersionLabel(list.version)}</Text>\n      <LinkExternal external href={`https://tokenlists.org/token-list?url=${listUrl}`}>\n        {t('See')}\n      </LinkExternal>\n      <Button variant=\"danger\" scale=\"xs\" onClick={handleRemoveList} disabled={Object.keys(listsByUrl).length === 1}>\n        {t('Remove')}\n      </Button>\n      {pending && (\n        <Button variant=\"text\" onClick={handleAcceptListUpdate} style={{ fontSize: '12px' }}>\n          {t('Update list')}\n        </Button>\n      )}\n    </div>,\n    { placement: 'right-end', trigger: 'click' },\n  )\n\n  if (!list) return null\n\n  return (\n    <RowWrapper active={isActive} key={listUrl} id={listUrlRowHTMLId(listUrl)}>\n      {tooltipVisible && tooltip}\n      {list.logoURI ? (\n        <ListLogo size=\"40px\" style={{ marginRight: '1rem' }} logoURI={list.logoURI} alt={`${list.name} list logo`} />\n      ) : (\n        <div style={{ width: '24px', height: '24px', marginRight: '1rem' }} />\n      )}\n      <Column style={{ flex: '1' }}>\n        <Row>\n          <Text bold>{list.name}</Text>\n        </Row>\n        <RowFixed mt=\"4px\">\n          <Text fontSize=\"12px\" mr=\"6px\" textTransform=\"lowercase\">\n            {list.tokens.length} {t('Tokens')}\n          </Text>\n          <span ref={targetRef}>\n            <CogIcon color=\"text\" width=\"12px\" />\n          </span>\n        </RowFixed>\n      </Column>\n      <Toggle\n        checked={isActive}\n        onChange={() => {\n          if (isActive) {\n            handleDisableList()\n          } else {\n            handleEnableList()\n          }\n        }}\n      />\n    </RowWrapper>\n  )\n})\n\nconst ListContainer = styled.div`\n  padding: 1rem 0;\n  height: 100%;\n  overflow: auto;\n`\n\nfunction ManageLists({\n  setModalView,\n  setImportList,\n  setListUrl,\n}: {\n  setModalView: (view: CurrencyModalView) => void\n  setImportList: (list: TokenList) => void\n  setListUrl: (url: string) => void\n}) {\n  const [listUrlInput, setListUrlInput] = useState<string>('')\n\n  const { t } = useTranslation()\n\n  const lists = useAllLists()\n\n  // sort by active but only if not visible\n  const activeListUrls = useActiveListUrls()\n  const [activeCopy, setActiveCopy] = useState<string[] | undefined>()\n  useEffect(() => {\n    if (!activeCopy && activeListUrls) {\n      setActiveCopy(activeListUrls)\n    }\n  }, [activeCopy, activeListUrls])\n\n  const handleInput = useCallback((e) => {\n    setListUrlInput(e.target.value)\n  }, [])\n\n  const fetchList = useFetchListCallback()\n\n  const validUrl: boolean = useMemo(() => {\n    return uriToHttp(listUrlInput).length > 0 || Boolean(parseENSAddress(listUrlInput))\n  }, [listUrlInput])\n\n  const sortedLists = useMemo(() => {\n    const listUrls = Object.keys(lists)\n    return listUrls\n      .filter((listUrl) => {\n        // only show loaded lists, hide unsupported lists\n        return Boolean(lists[listUrl].current) && !UNSUPPORTED_LIST_URLS.includes(listUrl)\n      })\n      .sort((u1, u2) => {\n        const { current: l1 } = lists[u1]\n        const { current: l2 } = lists[u2]\n\n        // first filter on active lists\n        if (activeCopy?.includes(u1) && !activeCopy?.includes(u2)) {\n          return -1\n        }\n        if (!activeCopy?.includes(u1) && activeCopy?.includes(u2)) {\n          return 1\n        }\n\n        if (l1 && l2) {\n          return l1.name.toLowerCase() < l2.name.toLowerCase()\n            ? -1\n            : l1.name.toLowerCase() === l2.name.toLowerCase()\n            ? 0\n            : 1\n        }\n        if (l1) return -1\n        if (l2) return 1\n        return 0\n      })\n  }, [lists, activeCopy])\n\n  // temporary fetched list for import flow\n  const [tempList, setTempList] = useState<TokenList>()\n  const [addError, setAddError] = useState<string | undefined>()\n\n  useEffect(() => {\n    async function fetchTempList() {\n      fetchList(listUrlInput, false)\n        .then((list) => setTempList(list))\n        .catch(() => setAddError('Error importing list'))\n    }\n    // if valid url, fetch details for card\n    if (validUrl) {\n      fetchTempList()\n    } else {\n      setTempList(undefined)\n      if (listUrlInput !== '') {\n        setAddError('Enter valid list location')\n      }\n    }\n\n    // reset error\n    if (listUrlInput === '') {\n      setAddError(undefined)\n    }\n  }, [fetchList, listUrlInput, validUrl])\n\n  // check if list is already imported\n  const isImported = Object.keys(lists).includes(listUrlInput)\n\n  // set list values and have parent modal switch to import list view\n  const handleImport = useCallback(() => {\n    if (!tempList) return\n    setImportList(tempList)\n    setModalView(CurrencyModalView.importList)\n    setListUrl(listUrlInput)\n  }, [listUrlInput, setImportList, setListUrl, setModalView, tempList])\n\n  return (\n    <Wrapper>\n      <AutoColumn gap=\"14px\">\n        <Row>\n          <Input\n            id=\"list-add-input\"\n            scale=\"lg\"\n            placeholder={t('https:// or ipfs:// or ENS name')}\n            value={listUrlInput}\n            onChange={handleInput}\n          />\n        </Row>\n        {addError ? (\n          <Text color=\"failure\" style={{ textOverflow: 'ellipsis', overflow: 'hidden' }}>\n            {addError}\n          </Text>\n        ) : null}\n      </AutoColumn>\n      {tempList && (\n        <AutoColumn style={{ paddingTop: 0 }}>\n          <Card padding=\"12px 20px\">\n            <RowBetween>\n              <RowFixed>\n                {tempList.logoURI && <ListLogo logoURI={tempList.logoURI} size=\"40px\" />}\n                <AutoColumn gap=\"4px\" style={{ marginLeft: '20px' }}>\n                  <Text bold>{tempList.name}</Text>\n                  <Text color=\"textSubtle\" small textTransform=\"lowercase\">\n                    {tempList.tokens.length} {t('Tokens')}\n                  </Text>\n                </AutoColumn>\n              </RowFixed>\n              {isImported ? (\n                <RowFixed>\n                  <CheckmarkIcon width=\"16px\" mr=\"10px\" />\n                  <Text>{t('Loaded')}</Text>\n                </RowFixed>\n              ) : (\n                <Button width=\"fit-content\" onClick={handleImport}>\n                  {t('Import')}\n                </Button>\n              )}\n            </RowBetween>\n          </Card>\n        </AutoColumn>\n      )}\n      <ListContainer>\n        <AutoColumn gap=\"md\">\n          {sortedLists.map((listUrl) => (\n            <ListRow key={listUrl} listUrl={listUrl} />\n          ))}\n        </AutoColumn>\n      </ListContainer>\n    </Wrapper>\n  )\n}\n\nexport default ManageLists\n","import React, { useRef, RefObject, useCallback, useState, useMemo } from 'react'\nimport { Token } from '@pancakeswap/sdk'\nimport { Text, Button, CloseIcon, IconButton, LinkExternal, Input, Link } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport Row, { RowBetween, RowFixed } from 'components/Layout/Row'\nimport { useToken } from 'hooks/Tokens'\nimport { useRemoveUserAddedToken } from 'state/user/hooks'\nimport useUserAddedTokens from 'state/user/hooks/useUserAddedTokens'\nimport { CurrencyLogo } from 'components/Logo'\nimport { getBscScanLink, isAddress } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\nimport Column, { AutoColumn } from '../Layout/Column'\nimport ImportRow from './ImportRow'\nimport { CurrencyModalView } from './types'\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: calc(100% - 60px);\n  position: relative;\n  padding-bottom: 60px;\n`\n\nconst Footer = styled.div`\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n\nexport default function ManageTokens({\n  setModalView,\n  setImportToken,\n}: {\n  setModalView: (view: CurrencyModalView) => void\n  setImportToken: (token: Token) => void\n}) {\n  const { chainId } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n\n  // manage focus on modal show\n  const inputRef = useRef<HTMLInputElement>()\n  const handleInput = useCallback((event) => {\n    const input = event.target.value\n    const checksummedInput = isAddress(input)\n    setSearchQuery(checksummedInput || input)\n  }, [])\n\n  // if they input an address, use it\n  const searchToken = useToken(searchQuery)\n\n  // all tokens for local list\n  const userAddedTokens: Token[] = useUserAddedTokens()\n  const removeToken = useRemoveUserAddedToken()\n\n  const handleRemoveAll = useCallback(() => {\n    if (chainId && userAddedTokens) {\n      userAddedTokens.map((token) => {\n        return removeToken(chainId, token.address)\n      })\n    }\n  }, [removeToken, userAddedTokens, chainId])\n\n  const tokenList = useMemo(() => {\n    return (\n      chainId &&\n      userAddedTokens.map((token) => (\n        <RowBetween key={token.address} width=\"100%\">\n          <RowFixed>\n            <CurrencyLogo currency={token} size=\"20px\" />\n            <Link external href={getBscScanLink(token.address, 'address', chainId)} color=\"textSubtle\" ml=\"10px\">\n              {token.symbol}\n            </Link>\n          </RowFixed>\n          <RowFixed>\n            <IconButton variant=\"text\" onClick={() => removeToken(chainId, token.address)}>\n              <CloseIcon />\n            </IconButton>\n            <LinkExternal href={getBscScanLink(token.address, 'address', chainId)} />\n          </RowFixed>\n        </RowBetween>\n      ))\n    )\n  }, [userAddedTokens, chainId, removeToken])\n\n  const isAddressValid = searchQuery === '' || isAddress(searchQuery)\n\n  return (\n    <Wrapper>\n      <Column style={{ width: '100%', flex: '1 1' }}>\n        <AutoColumn gap=\"14px\">\n          <Row>\n            <Input\n              id=\"token-search-input\"\n              scale=\"lg\"\n              placeholder=\"0x0000\"\n              value={searchQuery}\n              autoComplete=\"off\"\n              ref={inputRef as RefObject<HTMLInputElement>}\n              onChange={handleInput}\n              isWarning={!isAddressValid}\n            />\n          </Row>\n          {!isAddressValid && <Text color=\"failure\">{t('Enter valid token address')}</Text>}\n          {searchToken && (\n            <ImportRow\n              token={searchToken}\n              showImportView={() => setModalView(CurrencyModalView.importToken)}\n              setImportToken={setImportToken}\n              style={{ height: 'fit-content' }}\n            />\n          )}\n        </AutoColumn>\n        {tokenList}\n        <Footer>\n          <Text bold color=\"textSubtle\">\n            {userAddedTokens?.length} {userAddedTokens.length === 1 ? t('Custom Token') : t('Custom Tokens')}\n          </Text>\n          {userAddedTokens.length > 0 && (\n            <Button variant=\"tertiary\" onClick={handleRemoveAll}>\n              {t('Clear all')}\n            </Button>\n          )}\n        </Footer>\n      </Column>\n    </Wrapper>\n  )\n}\n","import React, { useState } from 'react'\nimport { Token } from '@pancakeswap/sdk'\nimport { ButtonMenu, ButtonMenuItem, ModalBody } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { TokenList } from '@uniswap/token-lists'\nimport { useTranslation } from 'contexts/Localization'\nimport ManageLists from './ManageLists'\nimport ManageTokens from './ManageTokens'\nimport { CurrencyModalView } from './types'\n\nconst StyledButtonMenu = styled(ButtonMenu)`\n  width: 100%;\n`\n\nexport default function Manage({\n  setModalView,\n  setImportList,\n  setImportToken,\n  setListUrl,\n}: {\n  setModalView: (view: CurrencyModalView) => void\n  setImportToken: (token: Token) => void\n  setImportList: (list: TokenList) => void\n  setListUrl: (url: string) => void\n}) {\n  const [showLists, setShowLists] = useState(true)\n\n  const { t } = useTranslation()\n\n  return (\n    <ModalBody>\n      <StyledButtonMenu\n        activeIndex={showLists ? 0 : 1}\n        onItemClick={() => setShowLists((prev) => !prev)}\n        scale=\"sm\"\n        variant=\"subtle\"\n        mb=\"32px\"\n      >\n        <ButtonMenuItem width=\"50%\">{t('Lists')}</ButtonMenuItem>\n        <ButtonMenuItem width=\"50%\">{t('Tokens')}</ButtonMenuItem>\n      </StyledButtonMenu>\n      {showLists ? (\n        <ManageLists setModalView={setModalView} setImportList={setImportList} setListUrl={setListUrl} />\n      ) : (\n        <ManageTokens setModalView={setModalView} setImportToken={setImportToken} />\n      )}\n    </ModalBody>\n  )\n}\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, Text, Link, Flex, Checkbox, Message } from '@pancakeswap/uikit'\nimport Card from 'components/Card'\nimport { AutoColumn } from 'components/Layout/Column'\nimport { RowBetween, RowFixed } from 'components/Layout/Row'\nimport useTheme from 'hooks/useTheme'\nimport { ListLogo } from 'components/Logo'\nimport { TokenList } from '@uniswap/token-lists'\nimport { useDispatch } from 'react-redux'\nimport { AppDispatch } from 'state'\nimport useFetchListCallback from 'hooks/useFetchListCallback'\nimport { removeList, enableList } from 'state/lists/actions'\nimport { useAllLists } from 'state/lists/hooks'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ImportProps {\n  listURL: string\n  list: TokenList\n  onImport: () => void\n}\n\nconst Wrapper = styled.div`\n  position: relative;\n  width: 100%;\n`\n\nconst TextDot = styled.div`\n  height: 3px;\n  width: 3px;\n  background-color: ${({ theme }) => theme.colors.text};\n  border-radius: 50%;\n`\n\nfunction ImportList({ listURL, list, onImport }: ImportProps) {\n  const { theme } = useTheme()\n  const dispatch = useDispatch<AppDispatch>()\n\n  const { t } = useTranslation()\n\n  // user must accept\n  const [confirmed, setConfirmed] = useState(false)\n\n  const lists = useAllLists()\n  const fetchList = useFetchListCallback()\n\n  // monitor is list is loading\n  const adding = Boolean(lists[listURL]?.loadingRequestId)\n  const [addError, setAddError] = useState<string | null>(null)\n\n  const handleAddList = useCallback(() => {\n    if (adding) return\n    setAddError(null)\n    fetchList(listURL)\n      .then(() => {\n        dispatch(enableList(listURL))\n        onImport()\n      })\n      .catch((error) => {\n        setAddError(error.message)\n        dispatch(removeList(listURL))\n      })\n  }, [adding, dispatch, fetchList, listURL, onImport])\n\n  return (\n    <Wrapper>\n      <AutoColumn gap=\"md\">\n        <AutoColumn gap=\"md\">\n          <Card padding=\"12px 20px\">\n            <RowBetween>\n              <RowFixed>\n                {list.logoURI && <ListLogo logoURI={list.logoURI} size=\"40px\" />}\n                <AutoColumn gap=\"sm\" style={{ marginLeft: '20px' }}>\n                  <RowFixed>\n                    <Text bold mr=\"6px\">\n                      {list.name}\n                    </Text>\n                    <TextDot />\n                    <Text small color=\"textSubtle\" ml=\"6px\">\n                      {list.tokens.length} tokens\n                    </Text>\n                  </RowFixed>\n                  <Link\n                    small\n                    external\n                    ellipsis\n                    maxWidth=\"90%\"\n                    href={`https://tokenlists.org/token-list?url=${listURL}`}\n                  >\n                    {listURL}\n                  </Link>\n                </AutoColumn>\n              </RowFixed>\n            </RowBetween>\n          </Card>\n\n          <Message variant=\"danger\">\n            <Flex flexDirection=\"column\">\n              <Text fontSize=\"20px\" textAlign=\"center\" color={theme.colors.failure} mb=\"16px\">\n                {t('Import at your own risk')}\n              </Text>\n              <Text color={theme.colors.failure} mb=\"8px\">\n                {t(\n                  'By adding this list you are implicitly trusting that the data is correct. Anyone can create a list, including creating fake versions of existing lists and lists that claim to represent projects that do not have one.',\n                )}\n              </Text>\n              <Text bold color={theme.colors.failure} mb=\"16px\">\n                {typeof 'If you purchase a token from this list, you may not be able to sell it back.'}\n              </Text>\n              <Flex alignItems=\"center\">\n                <Checkbox\n                  name=\"confirmed\"\n                  type=\"checkbox\"\n                  checked={confirmed}\n                  onChange={() => setConfirmed(!confirmed)}\n                  scale=\"sm\"\n                />\n                <Text ml=\"10px\" style={{ userSelect: 'none' }}>\n                  {t('I understand')}\n                </Text>\n              </Flex>\n            </Flex>\n          </Message>\n\n          <Button disabled={!confirmed} onClick={handleAddList}>\n            {t('Import')}\n          </Button>\n          {addError ? (\n            <Text color=\"failure\" style={{ textOverflow: 'ellipsis', overflow: 'hidden' }}>\n              {addError}\n            </Text>\n          ) : null}\n        </AutoColumn>\n      </AutoColumn>\n    </Wrapper>\n  )\n}\n\nexport default ImportList\n","import React, { useCallback, useState } from 'react'\nimport { Currency, Token } from '@pancakeswap/sdk'\nimport {\n  ModalContainer,\n  ModalHeader,\n  ModalTitle,\n  ModalBackButton,\n  ModalCloseButton,\n  ModalBody,\n  InjectedModalProps,\n  Heading,\n  Button,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport usePrevious from 'hooks/usePreviousValue'\nimport { TokenList } from '@uniswap/token-lists'\nimport { useTranslation } from 'contexts/Localization'\nimport CurrencySearch from './CurrencySearch'\nimport ImportToken from './ImportToken'\nimport Manage from './Manage'\nimport ImportList from './ImportList'\nimport { CurrencyModalView } from './types'\n\nconst Footer = styled.div`\n  width: 100%;\n  background-color: ${({ theme }) => theme.colors.backgroundAlt};\n  text-align: center;\n`\n\nconst StyledModalContainer = styled(ModalContainer)`\n  max-width: 420px;\n  width: 100%;\n`\n\nconst StyledModalBody = styled(ModalBody)`\n  padding: 24px;\n`\n\ninterface CurrencySearchModalProps extends InjectedModalProps {\n  selectedCurrency?: Currency | null\n  onCurrencySelect: (currency: Currency) => void\n  otherSelectedCurrency?: Currency | null\n  showCommonBases?: boolean\n}\n\nexport default function CurrencySearchModal({\n  onDismiss = () => null,\n  onCurrencySelect,\n  selectedCurrency,\n  otherSelectedCurrency,\n  showCommonBases = false,\n}: CurrencySearchModalProps) {\n  const [modalView, setModalView] = useState<CurrencyModalView>(CurrencyModalView.search)\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency) => {\n      onDismiss()\n      onCurrencySelect(currency)\n    },\n    [onDismiss, onCurrencySelect],\n  )\n\n  // for token import view\n  const prevView = usePrevious(modalView)\n\n  // used for import token flow\n  const [importToken, setImportToken] = useState<Token | undefined>()\n\n  // used for import list\n  const [importList, setImportList] = useState<TokenList | undefined>()\n  const [listURL, setListUrl] = useState<string | undefined>()\n\n  const { t } = useTranslation()\n\n  const config = {\n    [CurrencyModalView.search]: { title: t('Select a Token'), onBack: undefined },\n    [CurrencyModalView.manage]: { title: t('Manage'), onBack: () => setModalView(CurrencyModalView.search) },\n    [CurrencyModalView.importToken]: {\n      title: t('Import Tokens'),\n      onBack: () =>\n        setModalView(prevView && prevView !== CurrencyModalView.importToken ? prevView : CurrencyModalView.search),\n    },\n    [CurrencyModalView.importList]: { title: t('Import List'), onBack: () => setModalView(CurrencyModalView.search) },\n  }\n\n  return (\n    <StyledModalContainer minWidth=\"320px\">\n      <ModalHeader>\n        <ModalTitle>\n          {config[modalView].onBack && <ModalBackButton onBack={config[modalView].onBack} />}\n          <Heading>{config[modalView].title}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <StyledModalBody>\n        {modalView === CurrencyModalView.search ? (\n          <CurrencySearch\n            onCurrencySelect={handleCurrencySelect}\n            selectedCurrency={selectedCurrency}\n            otherSelectedCurrency={otherSelectedCurrency}\n            showCommonBases={showCommonBases}\n            showImportView={() => setModalView(CurrencyModalView.importToken)}\n            setImportToken={setImportToken}\n          />\n        ) : modalView === CurrencyModalView.importToken && importToken ? (\n          <ImportToken tokens={[importToken]} handleCurrencySelect={handleCurrencySelect} />\n        ) : modalView === CurrencyModalView.importList && importList && listURL ? (\n          <ImportList list={importList} listURL={listURL} onImport={() => setModalView(CurrencyModalView.manage)} />\n        ) : modalView === CurrencyModalView.manage ? (\n          <Manage\n            setModalView={setModalView}\n            setImportToken={setImportToken}\n            setImportList={setImportList}\n            setListUrl={setListUrl}\n          />\n        ) : (\n          ''\n        )}\n        {modalView === CurrencyModalView.search && (\n          <Footer>\n            <Button\n              scale=\"sm\"\n              variant=\"text\"\n              onClick={() => setModalView(CurrencyModalView.manage)}\n              className=\"list-token-manage-button\"\n            >\n              {t('Manage Tokens')}\n            </Button>\n          </Footer>\n        )}\n      </StyledModalBody>\n    </StyledModalContainer>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { escapeRegExp } from '../../utils'\n\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\n  color: ${({ error, theme }) => (error ? theme.colors.failure : theme.colors.text)};\n  width: 0;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: transparent;\n  font-size: 16px;\n  text-align: ${({ align }) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.colors.textSubtle};\n  }\n`\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  ...rest\n}: {\n  value: string | number\n  onUserInput: (input: string) => void\n  error?: boolean\n  fontSize?: string\n  align?: 'right' | 'left'\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\n  const enforcer = (nextUserInput: string) => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput)\n    }\n  }\n\n  const { t } = useTranslation()\n\n  return (\n    <StyledInput\n      {...rest}\n      value={value}\n      onChange={(event) => {\n        // replace commas with periods, because we exclusively uses period as the decimal separator\n        enforcer(event.target.value.replace(/,/g, '.'))\n      }}\n      // universal input options\n      inputMode=\"decimal\"\n      title={t('Token Amount')}\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\n      placeholder={placeholder || '0.0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n    />\n  )\n})\n\nexport default Input\n","import React from 'react'\nimport { Currency, Pair } from '@pancakeswap/sdk'\nimport { Button, ChevronDownIcon, Text, useModal, Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCurrencyBalance } from '../../state/wallet/hooks'\nimport CurrencySearchModal from '../SearchModal/CurrencySearchModal'\nimport { CurrencyLogo, DoubleCurrencyLogo } from '../Logo'\n\nimport { RowBetween } from '../Layout/Row'\nimport { Input as NumericalInput } from './NumericalInput'\n\nconst InputRow = styled.div<{ selected: boolean }>`\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  padding: ${({ selected }) => (selected ? '0.75rem 0.5rem 0.75rem 1rem' : '0.75rem 0.75rem 0.75rem 1rem')};\n`\nconst CurrencySelectButton = styled(Button).attrs({ variant: 'text', scale: 'sm' })`\n  padding: 0 0.5rem;\n`\nconst LabelRow = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n  font-size: 0.75rem;\n  line-height: 1rem;\n  padding: 0.75rem 1rem 0 1rem;\n`\nconst InputPanel = styled.div<{ hideInput?: boolean }>`\n  display: flex;\n  flex-flow: column nowrap;\n  position: relative;\n  border-radius: ${({ hideInput }) => (hideInput ? '8px' : '20px')};\n  background-color: ${({ theme }) => theme.colors.background};\n  z-index: 1;\n`\nconst Container = styled.div<{ hideInput: boolean }>`\n  border-radius: 16px;\n  background-color: ${({ theme }) => theme.colors.input};\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n`\ninterface CurrencyInputPanelProps {\n  value: string\n  onUserInput: (value: string) => void\n  onMax?: () => void\n  showMaxButton: boolean\n  label?: string\n  onCurrencySelect: (currency: Currency) => void\n  currency?: Currency | null\n  disableCurrencySelect?: boolean\n  hideBalance?: boolean\n  pair?: Pair | null\n  hideInput?: boolean\n  otherCurrency?: Currency | null\n  id: string\n  showCommonBases?: boolean\n}\nexport default function CurrencyInputPanel({\n  value,\n  onUserInput,\n  onMax,\n  showMaxButton,\n  label,\n  onCurrencySelect,\n  currency,\n  disableCurrencySelect = false,\n  hideBalance = false,\n  pair = null, // used for double token logo\n  hideInput = false,\n  otherCurrency,\n  id,\n  showCommonBases,\n}: CurrencyInputPanelProps) {\n  const { account } = useActiveWeb3React()\n  const selectedCurrencyBalance = useCurrencyBalance(account ?? undefined, currency ?? undefined)\n  const { t } = useTranslation()\n  const translatedLabel = label || t('Input')\n\n  const [onPresentCurrencyModal] = useModal(\n    <CurrencySearchModal\n      onCurrencySelect={onCurrencySelect}\n      selectedCurrency={currency}\n      otherSelectedCurrency={otherCurrency}\n      showCommonBases={showCommonBases}\n    />,\n  )\n  return (\n    <InputPanel id={id}>\n      <Container hideInput={hideInput}>\n        {!hideInput && (\n          <LabelRow>\n            <RowBetween>\n              <Text fontSize=\"14px\">{translatedLabel}</Text>\n              {account && (\n                <Text onClick={onMax} fontSize=\"14px\" style={{ display: 'inline', cursor: 'pointer' }}>\n                  {!hideBalance && !!currency\n                    ? t('Balance: %balance%', { balance: selectedCurrencyBalance?.toSignificant(6) ?? t('Loading') })\n                    : ' -'}\n                </Text>\n              )}\n            </RowBetween>\n          </LabelRow>\n        )}\n        <InputRow style={hideInput ? { padding: '0', borderRadius: '8px' } : {}} selected={disableCurrencySelect}>\n          {!hideInput && (\n            <>\n              <NumericalInput\n                className=\"token-amount-input\"\n                value={value}\n                onUserInput={(val) => {\n                  onUserInput(val)\n                }}\n              />\n              {account && currency && showMaxButton && label !== 'To' && (\n                <Button onClick={onMax} scale=\"sm\" variant=\"text\">\n                  MAX\n                </Button>\n              )}\n            </>\n          )}\n          <CurrencySelectButton\n            selected={!!currency}\n            className=\"open-currency-select-button\"\n            onClick={() => {\n              if (!disableCurrencySelect) {\n                onPresentCurrencyModal()\n              }\n            }}\n          >\n            <Flex alignItems=\"center\" justifyContent=\"space-between\">\n              {pair ? (\n                <DoubleCurrencyLogo currency0={pair.token0} currency1={pair.token1} size={16} margin />\n              ) : currency ? (\n                <CurrencyLogo currency={currency} size=\"24px\" style={{ marginRight: '8px' }} />\n              ) : null}\n              {pair ? (\n                <Text id=\"pair\">\n                  {pair?.token0.symbol}:{pair?.token1.symbol}\n                </Text>\n              ) : (\n                <Text id=\"pair\">\n                  {(currency && currency.symbol && currency.symbol.length > 20\n                    ? `${currency.symbol.slice(0, 4)}...${currency.symbol.slice(\n                        currency.symbol.length - 5,\n                        currency.symbol.length,\n                      )}`\n                    : currency?.symbol) || t('Select a currency')}\n                </Text>\n              )}\n              {!disableCurrencySelect && <ChevronDownIcon />}\n            </Flex>\n          </CurrencySelectButton>\n        </InputRow>\n      </Container>\n    </InputPanel>\n  )\n}\n","import { Token, TokenAmount } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\n\nimport { useTokenContract } from './useContract'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\nfunction useTokenAllowance(token?: Token, owner?: string, spender?: string): TokenAmount | undefined {\n  const contract = useTokenContract(token?.address, false)\n\n  const inputs = useMemo(() => [owner, spender], [owner, spender])\n  const allowance = useSingleCallResult(contract, 'allowance', inputs).result\n\n  return useMemo(\n    () => (token && allowance ? new TokenAmount(token, allowance.toString()) : undefined),\n    [token, allowance],\n  )\n}\n\nexport default useTokenAllowance\n","import { MaxUint256 } from '@ethersproject/constants'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Trade, TokenAmount, CurrencyAmount, ETHER } from '@pancakeswap/sdk'\nimport { useCallback, useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { ROUTER_ADDRESS } from '../config/constants'\nimport useTokenAllowance from './useTokenAllowance'\nimport { Field } from '../state/swap/actions'\nimport { useTransactionAdder, useHasPendingApproval } from '../state/transactions/hooks'\nimport { computeSlippageAdjustedAmounts } from '../utils/prices'\nimport { calculateGasMargin } from '../utils'\nimport { useTokenContract } from './useContract'\nimport { useCallWithGasPrice } from './useCallWithGasPrice'\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nexport function useApproveCallback(\n  amountToApprove?: CurrencyAmount,\n  spender?: string,\n): [ApprovalState, () => Promise<void>] {\n  const { account } = useActiveWeb3React()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const token = amountToApprove instanceof TokenAmount ? amountToApprove.token : undefined\n  const currentAllowance = useTokenAllowance(token, account ?? undefined, spender)\n  const pendingApproval = useHasPendingApproval(token?.address, spender)\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    if (!amountToApprove || !spender) return ApprovalState.UNKNOWN\n    if (amountToApprove.currency === ETHER) return ApprovalState.APPROVED\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lessThan(amountToApprove)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED\n  }, [amountToApprove, currentAllowance, pendingApproval, spender])\n\n  const tokenContract = useTokenContract(token?.address)\n  const addTransaction = useTransactionAdder()\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily')\n      return\n    }\n    if (!token) {\n      console.error('no token')\n      return\n    }\n\n    if (!tokenContract) {\n      console.error('tokenContract is null')\n      return\n    }\n\n    if (!amountToApprove) {\n      console.error('missing amount to approve')\n      return\n    }\n\n    if (!spender) {\n      console.error('no spender')\n      return\n    }\n\n    let useExact = false\n\n    const estimatedGas = await tokenContract.estimateGas.approve(spender, MaxUint256).catch(() => {\n      // general fallback for tokens who restrict approval amounts\n      useExact = true\n      return tokenContract.estimateGas.approve(spender, amountToApprove.raw.toString())\n    })\n\n    // eslint-disable-next-line consistent-return\n    return callWithGasPrice(\n      tokenContract,\n      'approve',\n      [spender, useExact ? amountToApprove.raw.toString() : MaxUint256],\n      {\n        gasLimit: calculateGasMargin(estimatedGas),\n      },\n    )\n      .then((response: TransactionResponse) => {\n        addTransaction(response, {\n          summary: `Approve ${amountToApprove.currency.symbol}`,\n          approval: { tokenAddress: token.address, spender },\n        })\n      })\n      .catch((error: Error) => {\n        console.error('Failed to approve token', error)\n        throw error\n      })\n  }, [approvalState, token, tokenContract, amountToApprove, spender, addTransaction, callWithGasPrice])\n\n  return [approvalState, approve]\n}\n\n// wraps useApproveCallback in the context of a swap\nexport function useApproveCallbackFromTrade(trade?: Trade, allowedSlippage = 0) {\n  const amountToApprove = useMemo(\n    () => (trade ? computeSlippageAdjustedAmounts(trade, allowedSlippage)[Field.INPUT] : undefined),\n    [trade, allowedSlippage],\n  )\n\n  return useApproveCallback(amountToApprove, ROUTER_ADDRESS)\n}\n","import { BigNumber } from 'ethers'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppState } from '../state'\nimport useCurrentBlockTimestamp from './useCurrentBlockTimestamp'\n\n// combines the block timestamp with the user setting to give the deadline that should be used for any submitted transaction\nexport default function useTransactionDeadline(): BigNumber | undefined {\n  const ttl = useSelector<AppState, number>((state) => state.user.userDeadline)\n  const blockTimestamp = useCurrentBlockTimestamp()\n  return useMemo(() => {\n    if (blockTimestamp && ttl) return blockTimestamp.add(ttl)\n    return undefined\n  }, [blockTimestamp, ttl])\n}\n","import { BigNumber } from 'ethers'\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport { useMulticallContract } from './useContract'\n\n// gets the current timestamp from the blockchain\nexport default function useCurrentBlockTimestamp(): BigNumber | undefined {\n  const multicall = useMulticallContract()\n  return useSingleCallResult(multicall, 'getCurrentBlockTimestamp')?.result?.[0]\n}\n"],"sourceRoot":""}